package com.hiatus.rez;import java.util.Enumeration;import java.util.HashMap;import java.util.Locale;import java.util.Map;import java.util.MissingResourceException;import java.util.ResourceBundle;import java.util.Set;import java.util.logging.Logger;import com.google.common.base.Function;import com.google.common.collect.Sets;/**************************************************************************************************************************************************************/public class ResourceBundleStore // extends AbstractResBundleStore{	private static Object	_locale_locker = new byte[0];	private static Object	_put_locker = new byte[0];	// 7 May 2002	// The top level hash containing the second-level hashes for each Locale. The top-level key is the Locale object...	private final Map<Locale,Map<String,String>>	m_LocaleDataHash;	private final String		m_StrBaseName;	private final Logger		m_Logger;			// 7 March 2002	private Set<Function<Locale,ResourceBundle>> finders = Sets.newHashSet();	private final  Locale defaultLocale;	/*******************************************************************************	*******************************************************************************/	public ResourceBundleStore( final String inBaseName, final Locale inDefaultLocale)	{		m_StrBaseName	 = inBaseName;		m_LocaleDataHash = new HashMap<Locale,Map<String,String>>(30);		m_Logger	 = Logger.getLogger("RSBS");	// 7 March 2002		defaultLocale = inDefaultLocale;		_getBestMatchedLocale( Locale.getDefault() );	// 4 June 2002. Load default Locale now	}	public void registerFinder( final Function<Locale,ResourceBundle> f) {		finders.add(f);	}	public void clear()	{		m_LocaleDataHash.clear();	}	/*******************************************************************************	*******************************************************************************/	public int getNumberLocales()	{		return m_LocaleDataHash.size();	}	/*******************************************************************************	*******************************************************************************/	public String getLocalesString()	{		return m_LocaleDataHash.keySet().toString();	}	/*******************************************************************************	*******************************************************************************/	public String getString( final String inKey, final Locale inLocale)	{		final Locale	theLoadedLocale = _getBestMatchedLocale(inLocale);			// Try to load "gd-GB" ... 7 March 2002/*		if ( m_LocaleDataHash == null)		{			m_Logger.error("getString(): m_LocaleDataHash == null !");			return "";		}		else if ( theLoadedLocale == null)		{			m_Logger.error("getString(): theLoadedLocale == null !");			return "";		}*/		////////////////////////////////////////////////////////////		final Map<String, String>		theLocaleData = m_LocaleDataHash.get(theLoadedLocale);		if ( theLocaleData == null)		{//			m_Logger.error("getString(): theLocaleData == null !");			return null;		}		////////////////////////////////////////////////////////////		String		theResult = (String) theLocaleData.get(inKey);		if ( theResult != null)		{			return theResult;		}		else if ( theLoadedLocale.getCountry() != null && !theLoadedLocale.getCountry().isEmpty())			// no string in "gd-GB", try in "gd" ... 7 March 2002		{			final Locale	theParentLocale = new Locale( theLoadedLocale.getLanguage(), "");			final Locale	theLoadedParent = _checkLocale(theParentLocale);		// try to load "gd" (duh!) ... 7 March 2002			theResult = (String)( m_LocaleDataHash.get(theLoadedParent)).get(inKey);			if ( theResult != null)			{				return theResult;			}		}		////////////////////////////////////////////////////////////		final Map<String, String> theMap = m_LocaleDataHash.get( Locale.getDefault() );		if ( theMap == null)			// Fix. 14 October 2002		{			return "";		}		return (String) theMap.get(inKey);	// use default locale ... 8 May 2002/*		try {		} catch (Exception err) {			m_Logger.error("getString().2 error: map = " + (HashMap) m_LocaleDataHash.get( Locale.getDefault() ) + ", loc = " + Locale.getDefault(), err);			return "";		}*/	}	/*******************************************************************************	  Check to see if the PropertyResourceBundle for this Locale has been loaded.	*******************************************************************************/	private Locale _checkLocale( final Locale inLocale)	{		Set<Locale> alreadyUsed = Sets.newHashSet();		Locale localeToTry = inLocale;		synchronized (_locale_locker)		{			while (true) {				if (m_LocaleDataHash.containsKey(localeToTry)) {					return localeToTry;				}				else				{					try					{						return _loadLocale(localeToTry);					}					catch (final MissingResourceException mre)					{						alreadyUsed.add(localeToTry);						if ( localeToTry.getVariant() != null && !localeToTry.getVariant().isEmpty()) {							localeToTry = new Locale( localeToTry.getLanguage(), localeToTry.getCountry());							if (alreadyUsed.contains(localeToTry)) {								continue;							}						}						else if ( localeToTry.getCountry() != null && !localeToTry.getCountry().isEmpty()) {							localeToTry = new Locale( localeToTry.getLanguage() );							if (alreadyUsed.contains(localeToTry)) {								continue;							}						}						else if (!localeToTry.equals(defaultLocale)) {							localeToTry = defaultLocale;							if (alreadyUsed.contains(localeToTry)) {								return null;							}						}						else {							return null;						}					}				}			}		}	}////	public Map<Locale,Map> getLocaleResourceMap( final Locale inLocale)//	{//		final Locale	theLoadedLocale = _checkLocale(inLocale);////		if (!inLocale.equals(theLoadedLocale))//		{//			return null;//		}////		return m_LocaleDataHash.get(inLocale);//	}////	public Map<Locale,Map> getUnmodifiableLocaleResourceMap( final Locale inLocale)//	{//		final Locale	theLoadedLocale = _checkLocale(inLocale);////		if (!inLocale.equals(theLoadedLocale))//		{//			return null;//		}////		return Collections.unmodifiableMap(m_LocaleDataHash.get(inLocale));//	}	/*******************************************************************************		7 May 2002	*******************************************************************************/	public boolean setLocaleMap( final Locale inLocale, final Map<String,String> inMap)	{		if ( inMap != null)		{			synchronized (_put_locker)			{				m_LocaleDataHash.put( inLocale, inMap);			}			//////////////////////////////////////////////////			m_Logger.info("[[[ Reassigned data for Locale \"" + inLocale + "\" ]]]");		}		return true;	}	/*******************************************************************************		7 May 2002	*******************************************************************************/	public boolean remove( final Locale inLocale)	{		synchronized (_put_locker)		{			m_LocaleDataHash.remove(inLocale);		}		//////////////////////////////////////////////////		m_Logger.info("[[[ Reset data for Locale \"" + inLocale + "\" ]]]");		return true;	}	/*******************************************************************************		This will load the resource bundle and add the data it contains to our top-level hash.	*******************************************************************************/	private Locale _loadLocale( final Locale inLocale) throws MissingResourceException	{		for ( Function<Locale,ResourceBundle> eachFinder : finders) {			final ResourceBundle result = eachFinder.apply(inLocale);			if ( result != null) {				return processRB( result, inLocale);			}		}		return processRB( ResourceBundle.getBundle( m_StrBaseName, inLocale), inLocale);	}	private Locale processRB( ResourceBundle inBundle, Locale inLocale) {		if (!m_LocaleDataHash.containsKey(inLocale))		{			final Enumeration<?>		theKeys = inBundle.getKeys();			final Map<String,String>	secondaryHash = new HashMap<String,String>();			while (theKeys.hasMoreElements())			{				final String strKey = (String) theKeys.nextElement();				secondaryHash.put( strKey, inBundle.getString(strKey));			}			m_LocaleDataHash.put( inLocale, secondaryHash);	// Now add the newly-created hash to our top-level hash.			m_Logger.info("[[[ Loaded Locale \"" + inLocale + "\" - " + secondaryHash.size() + " entries ]]]");		}		return inLocale;	}	/*******************************************************************************		8 May 2002	*******************************************************************************/	private Locale _getBestMatchedLocale( final Locale inLocale)	{		if ( inLocale != null)		{			final Locale	theLoadedLocale = _checkLocale(inLocale);			if ( theLoadedLocale != null)			{				return theLoadedLocale;			}		}		return Locale.getDefault();	}	/*******************************************************************************		My routine - 19 Dec 2000		Returns an array of values:		{ inKeyPrefix_0, inKeyPrefix_1, inKeyPrefix_2, ..., inKeyPrefix_n-1 }		Made more efficient - 24 November 2001	*******************************************************************************/	public String[] getStringArray( final String inKeyPrefix, final Locale inLocale)	{		final Locale theLoadedLocale = _getBestMatchedLocale(inLocale);		final Map<String, String>		thisLocalesMap = m_LocaleDataHash.get(theLoadedLocale);		int theCount = 0;		while ( thisLocalesMap.get( inKeyPrefix + "_" + theCount) != null)		{			theCount++;		}		//////////////////////////////////////////////////////////////////		if ( theCount > 0)		{			final String	theArray[] = new String[theCount];			for ( int i = 0; i < theCount; i++)			{				theArray[i] = (String) thisLocalesMap.get( inKeyPrefix + "_" + i);			}			return theArray;		}		///////////////////////////////////////////////////////////////////*		HashMap		thisLocalesMap = (HashMap) m_LocaleDataHash.get(theLoadedLocale);		List		theEntries = new ArrayList(20);		String		theString;		int		theCount = 0;		boolean		done = false;		while (!done)		{			theString = (String) thisLocalesMap.get( inKeyPrefix + "_" + theCount);			if ( theString != null)			{				theEntries.add(theString);				theCount++;			}			else	done = true;		}		return (String[]) theEntries.toArray();*/		return new String[0];	}}